(* Co-authentication simplified protocol Run #2

A               R               C
| <-------------|               |
| --------------+-------------->|
| <-------------+---------------|
| ------------->|               |
| <-------------|               |
        

SETUP:

-- Asymmetric key cryptography is used.
-- Attackers have Collaborator's key skR
-- Active attackers
-- Attackers can only phsically obtain the device.  Attackers have skR but 
    original Requester cannot request or initiate an authentication session.

SUMMARY:

-- Attackers cannot transmitted acknowledgment message and session_key
-- Authentication of A to R holds
-- Authentication of R to A holds

*)

(* Use an active attacker *)
set attacker = active.

(* Public communication channels *)
free c : channel.
free cAR : channel.
free cAC : channel.

(* Type declarations *)
type key.
type nonce.
type host.
type tag.

(* Public key types *)
type pkey. (* Public key *)
type skey. (* Secret key *)

fun pk (skey): pkey. (* A fucntion used to generate public key from a secret key *)
fun aenc (bitstring, pkey): bitstring. (* Encryption function *)
reduc forall x: bitstring, y: skey; adec (aenc(x, pk(y)), y) = x. (* Decryption function *)

(* Digital signature functions *)
fun sign (bitstring, skey): bitstring.
reduc forall x: bitstring, y: skey; checksign(sign(x, y), pk(y)) = x.

(* Ids of Authenticator, Requester, and Collaborator *)
free A, R, C: host.

(* Tables for registered devices and their associated keys *)
table skeys(host, skey).
table pkeys(host, pkey).

table registeredDevices(host, host).

(* A secret acknowledgment and session key *)
free session_key_test: bitstring [private].

(* constants for labeling messages*)
const access_req: tag [data].
const collab_req: tag [data].
const collab_res: tag [data].
const acknowledgment: bitstring [data].

(* Secrecy queries*)
query attacker (session_key_test).

(* Authentication queries *)

(* Requester believes that it initiated an authentication protocol with Authenticator. *)
event beginA (host, host, host, nonce).
(* Authenticator belives that it finished an authentication process with Requester and established a session key. *)
event endA (host, host, host, nonce, nonce).


(* Authenticator believes that Requester requested an access request. *)
event beginR (host, host, host, nonce).
(* Requester belives that it finished the authentication protocol with Authenticator. *)
event endR (host, host, host, nonce).

(* Collaborator beleives that it received a collaboration request from an associated device and responding this collaboration request. *)
event collabA (host, host, host, nonce).
event collabR (host, host, host, nonce).

(* Authentication of R to A *)
query h1: host, h2:host, h3: host, n: nonce, n2: nonce; event (endA(h1, h2, h3, n, n2)) ==> (inj-event (collabA(h1, h2, h3, n2)) && inj-event (beginA(h1, h2, h3, n))).

(* Authentication of A to R *)
query h1: host, h2:host, h3: host, n: nonce, n2: nonce; event (endR(h1, h2, h3, n)) ==> (inj-event (collabR(h1, h2, h3, n2)) && inj-event (beginR(h1, h2, h3, n))).

(* Symmetric key encryption and decryption functions *)
fun encrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; decrypt(encrypt(x,y),y) = x.
    

(* Authenticator process *)
let Authenticator(skA: skey) =
    in (cAR , (m: bitstring)); (* 1- R --> A *)
    let (=access_req, n1: nonce, xR: host, signature: bitstring) = adec (m, skA) in (* Decrypt message *)
        get pkeys(=xR, pkR: pkey) in (* Get the public key of the device *)
            let (=access_req, =n1, =xR) = checksign(signature, pkR) in 
                get registeredDevices (=xR, xC: host) in (* Check if xR is registered with xC *)
                    event beginR(A, xR, xC, n1);
                    new n2: nonce;
                    get pkeys(=xC, pkC: pkey) in 
                        let signature2 = sign((A, collab_req, xR, n2), skA) in 
                            out (cAC, (aenc((A, collab_req, xR, n2, signature2), pkC))); (* 2- A --> C *)
                            in (cAC, (m2: bitstring)); (* Wait for the response from Collaborator *) (* 3- C --> A *)
                            let (=xC, =collab_res, =xR, =n2, signature3: bitstring) = adec (m2, skA) in (* Check the collaboration request. *)
                                let (=xC, =collab_res, =xR, =n2) = checksign(signature3, pkC) in 
                                    new session_key: key;
                                    let signature4 = sign((A, xC, session_key, n1), skA) in 
                                        out (cAR, (aenc((A, xC, session_key, session_key_test, n1, signature4), pkR))); (* 4- A --> R *)
                                        in (cAR, m3: bitstring);
                                        let (=acknowledgment) = decrypt(m3, session_key) in (* Check the acknowledgment after establishing a session key. *)
                                            event endA(A, xR, xC, n1, n2).                         


(* Requester process *)
let Requester(pkA: pkey) =
    let xR = R in
        get registeredDevices(=xR, xC: host) in (* Get the associated device *)
            get skeys(=xR, skR: skey) in  (* Get the key *)
                new n1: nonce; (* Create a new timestamp, i.e., nonce *) 
                0.
                (* Requester is stolen, therefore it cannot request an access *)
                (*event beginA(A, xR, xC, n1);
                let signature = sign((access_req, n1, xR), skR) in 
                    
                    (*out (cAR, (aenc((access_req, n1, xR, signature), pkA))); (* 1-  R --> A *)
                  (*  in (cAR , (m: bitstring)); (* 4- A --> R *)
                    (*let (=xC, session_key: key, =session_key_test, =n1, signature2: bitstring) = adec (m, skR) in
                        let (=xC, =session_key, =n1) = checksign(signature2, pkA) in 
                            out (cAR, encrypt(acknowledgment, session_key)); (* 5- R --> A *)
                      (*      event endR(A, xR, xC, n1).

(* Collaborator process *)
let Collaborator(pkA: pkey) =
    let xC = C in
        0.
        (* in (cAC , (m: bitstring)); (* 2- A --> C *)
        (* get registeredDevices (=xC, xR: host) in (* Get the associated device *)
          (*   get skeys (=xC, skC: skey) in (* Get the key *)
             (*    let (=collab_req, =xR, n1: nonce, signature: bitstring) = adec (m, skC) in
                    let (=collab_req, =xR, =n1) = checksign(signature, pkA) in 
                        event collabA (A, xR, xC, n1);
                        event collabR (A, xR, xC, n1);
                        let signature2 = sign((collab_res, xR, n1), skC) in 
                            out (cAC, (aenc((collab_res, xR, n1, signature2), pkA))). (* 3- C --> A *)


(* Main process *)
process
    (* Create secret keys *)
    new skA: skey; let pkA = pk(skA) in out (cAR, pkA); (* Create key pairs and let attackers know the public keys *)
    new skR: skey; let pkR = pk(skR) in out (cAR, pkR);
    new skC: skey; let pkC = pk(skC) in out (cAR, pkC);

    (* Keys table *)
    insert skeys(R, skR); 
    insert skeys(C, skC);

    insert pkeys(R, pkR); 
    insert pkeys(C, pkC);


    (* Assocaiated devices table *)
    insert registeredDevices(R, C);
    insert registeredDevices(C, R);

    (* Give Requester's private key to attackers*)
    out (c, skR); 

    (* Init processes *)
    ((!Authenticator(skA)) | (!Requester(pkA)) | (!Collaborator(pkA)))